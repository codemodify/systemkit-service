

// logger.Log("install service")

// name := thisRef.command.Name
// prog := thisRef.command.String()
// args := []string{
// 	"create",
// 	fmt.Sprintf("\"%s\"", name),
// 	"binPath=",
// 	fmt.Sprintf("\"%s\"", prog),
// 	// "start=",
// 	// "boot",
// }

// out, err := runScCommand(args...)

// if err != nil {
// 	if strings.Contains(err.Error(), "exit status 1073") {
// 		logger.Log("service already exists")
// 	} else {
// 		logger.Log("sc create output:\n", out)
// 		return err
// 	}
// }

// // if strings.Contains(out, "SUCCESS") {
// // 	return nil
// // }

// _, err := runScCommand("start", fmt.Sprintf("\"%s\"", thisRef.command.Name))

// if err != nil {
// 	logger.Log("start service error: ", err)
// 	return err
// }

// return nil

// _, err := runScCommand("stop", fmt.Sprintf("\"%s\"", thisRef.command.Name))

// if err != nil {
// 	logger.Log("stop service error: ", err)

// 	if strings.Contains(err.Error(), "exit status 1062") {
// 		logger.Log("service already stopped")
// 	} else {
// 		return err
// 	}
// }

// return nil

// name := thisRef.command.Name

// err := thisRef.Stop()

// if err != nil {
// 	return err
// }

// _, err = runScCommand("delete", fmt.Sprintf("\"%s\"", name))

// if err != nil {
// 	logger.Log("delete service error: ", err)
// 	return err
// }

// return nil

// var beepFunc = syscall.MustLoadDLL("user32.dll").MustFindProc("MessageBeep")

// func beep() {
// 	beepFunc.Call(0xffffffff)
// }

// logger.Log("uninstall service: ", name)

// serv, err := connectService(name)

// if err != nil {
// 	logger.Log("uninstall error: ", err)
// 	return err
// }

// defer serv.Close()

// logger.Log("deleting service")

// err = serv.Delete()

// if err != nil {
// 	logger.Log("delete service error: ", err)
// 	return err
// }

// logger.Log("service deleted")
// logger.Log("removing event log")

// err = eventlog.Remove(name)

// if err != nil {
// 	logger.Log("remove event log error: ", err)
// 	return err
// }

// logger.Log("event log removed")

// manager, err := openManager()

// if err != nil {
// 	return err
// }

// defer manager.Disconnect()

// cmd := thisRef.command

// serv, err := manager.CreateService(
// 	cmd.Name,
// 	cmd.Program,
// 	mgr.Config{DisplayName: cmd.Name},
// 	cmd.Args...,
// )

// if err != nil {
// 	return err
// }

// defer serv.Close()

// err = eventlog.InstallAsEventCreate(cmd.Name, eventlog.Error|eventlog.Warning|eventlog.Info)

// if err != nil {
// 	serv.Delete()
// 	return fmt.Errorf("SetupEventLogSource() failed: %s", err)
// }

// logger.Logf("manager: %+v", manager)

// serv, err := connectService(name)

// if err != nil {
// 	logger.Log("status error: ", err)
// 	return ServiceStatus{}, err
// }

// defer serv.Close()

// logger.Logf("service: %+v", serv)

// pid := getPID(name)